import numpy as np

def unitStep(v):
    if v >= 0:
        return 1
    else:
        return 0

def perceptronModel(x, w, b):
    v = np.dot(w, x) + b
    y = unitStep(v)
    return y

def train_perceptron(X, y, w, b, learning_rate=0.01, epochs=10):
    weights = w
    bias = b
    for epoch in range(epochs):
        for i in range(len(X)):
            y_pred = perceptronModel(X[i], weights, bias)
            if y_pred == y[i]:
                continue
            else:
                error = y[i] - y_pred
                weights += learning_rate * error * X[i]
                bias += learning_rate * error
    return weights, bias

# NOT logic function
# Updated initialization: wNOT = -0.5, bNOT = 0.3
def NOT_logicFunction(x, wNOT, bNOT):
    return perceptronModel(x, wNOT, bNOT)

# AND logic function
# Updated initialization: w1 = [0.5, 0.5], bAND = -0.7
def AND_logicFunction(x, w1, bAND):
    return perceptronModel(x, w1, bAND)

# OR logic function
# Updated initialization: w2 = [0.5, 0.5], bOR = -0.2
def OR_logicFunction(x, w2, bOR):
    return perceptronModel(x, w2, bOR)

def XOR_logicFunction(x):
    # Initialize weights and biases for NOT, AND, and OR functions
    wNOT = -0.5
    bNOT = 0.3
    x1 = np.array([0, 1])
    y1 = np.array([1, 0])
    wNOT, bNOT = train_perceptron(x1, y1, wNOT, bNOT)

    w1 = np.array([0.5, 0.5])
    bAND = -0.7
    y2 = np.array([0, 0, 0, 1])
    w1, bAND = train_perceptron(X, y2, w1, bAND)

    w2 = np.array([0.5, 0.5])
    bOR = -0.2
    y3 = np.array([0, 1, 1, 1])
    w2, bOR = train_perceptron(X, y3, w2, bOR)

    y11 = AND_logicFunction(x, w1, bAND)
    y12 = OR_logicFunction(x, w2, bOR)
    y13 = NOT_logicFunction(y11, wNOT, bNOT)
    final_x = np.array([y12, y13])
    finalOutput = AND_logicFunction(final_x, w1, bAND)
    return finalOutput

# Input and output for testing
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
Y = np.array([0, 1, 1, 0])

print("XOR({}, {})={}".format(X[0][0], X[0][1], XOR_logicFunction(X[0])))
print("XOR({}, {})={}".format(X[1][0], X[1][1], XOR_logicFunction(X[1])))
print("XOR({}, {})={}".format(X[2][0], X[2][1], XOR_logicFunction(X[2])))
print("XOR({}, {})={}".format(X[3][0], X[3][1], XOR_logicFunction(X[3])))
